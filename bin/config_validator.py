#!/usr/bin/python

import argparse
import lxml.etree as et
import os
import pwd
import tempfile
import time
import sys
import shutil

class RenamedTemporaryFile(object):
    """
    A temporary file object which will be renamed to the specified
    path on exit.
    """
    def __init__(self, final_path, **kwargs):
        tmpfile_dir = kwargs.pop('dir', None)

        # Put temporary file in the same directory as the location for the
        # final file so that an atomic move into place can occur.

        if tmpfile_dir is None:
            tmpfile_dir = os.path.dirname(final_path)

        self.tmpfile = tempfile.NamedTemporaryFile(dir=tmpfile_dir, **kwargs)
        self.final_path = final_path

    def __getattr__(self, attr):
        """
        Delegate attribute access to the underlying temporary file object.
        """
        return getattr(self.tmpfile, attr)

    def __enter__(self):
        self.tmpfile.__enter__()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is None:
            self.tmpfile.delete = False
            result = self.tmpfile.__exit__(exc_type, exc_val, exc_tb)
            os.rename(self.tmpfile.name, self.final_path)
        else:
            result = self.tmpfile.__exit__(exc_type, exc_val, exc_tb)

        return result

class FileResolver(et.Resolver):
    def resolve(self, url, pubid, context):
        print >> sys.stderr, (url, pubid, context)
        return self.resolve_filename(url, context)


def main():
    parser = argparse.ArgumentParser(description="Apply configuration option transform")
    parser.add_argument('-f', '--filename',
                        required=True, help="XML options file name")
    parser.add_argument('-o', '--outdir',
                        required=True, help="Destination directory")
    parser.add_argument("--overwrite", action='store_true',
                        default=False, help="Overwrite output file")
    parser.add_argument('--user',
                        default=pwd.getpwuid(os.getuid()).pw_gecos,
                        help="Username of the XML author")
    parser.add_argument('--email',
                        help="Email of the XML author")

    args = parser.parse_args()

    try:
        xmlparser = et.XMLParser()
        xmlparser.resolvers.add(FileResolver()) # So that we can handle XSLT document() fun

        xml = et.parse(args.filename, xmlparser)
        root = xml.getroot()
    except IOError as e:
        print >> sys.stderr, e
        exit(1)

    outname = os.path.basename(args.filename.rstrip(".xml").rstrip(".XML") + ".hpp")
    outfile = os.path.join(args.outdir, outname)

    if os.path.isfile(outfile) and not args.overwrite:
        print >> sys.stderr, \
            "File '%s' exists and no --overwrite option provided!\n" % outfile
        exit(2)

    with RenamedTemporaryFile(outname, dir=args.outdir) as f:
        f.write("//%s\n" % ("-" * 78))
        f.write("// %s\n" % outname)
        f.write("// This file is auto-generated by utxx/bin/%s\n" \
                % os.path.basename(sys.argv[0]))
        f.write("//\n// *** DON'T MODIFY BY HAND!!! ***\n//\n")
        f.write("// Copyright (c) 2012 Serge Aleynikov <saleyn at gmail dot com>\n")
        f.write("// Generated by: %s%s\n" % \
            (args.user, " <"+args.email+">" if args.email != None else ""))
        f.write("// Created.....: %s\n" % time.strftime('%Y-%m-%d %H:%M:%S'))
        f.write("//%s\n\n" % ("-" * 78))

        ifdeftag = "_UTXX_AUTOGEN_%s_" % \
            outname.strip(" \\").upper().replace('.','_')
        f.write("#ifndef %s\n"   % ifdeftag)
        f.write("#define %s\n\n" % ifdeftag)
        f.write("#include <utxx/config_validator.hpp>\n\n")
        f.write("namespace %s {\n" % root.attrib['namespace'])
        f.write("    using namespace utxx;\n")

        incl_files = sorted(set(root.xpath("//include/@file")))
        inc_opts = [root.xpath("document('%s')//@name" % fn) for fn in incl_files]
        all_opts = root.xpath("*//@name") 
        print(inc_opts)

if __name__ == '__main__':
    main()
